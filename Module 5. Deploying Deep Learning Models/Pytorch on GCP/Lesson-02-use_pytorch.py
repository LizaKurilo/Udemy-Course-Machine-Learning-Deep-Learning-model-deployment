# -*- coding: utf-8 -*-
"""use_pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17mN7RePdjyWrg4-EwgAey3LKmuRvY6As
"""

import pickle

sc = pickle.load(open('sc_torch.pickle', 'rb'))

import torch
import torch.nn as nn
from torch.nn import functional as F

import pandas as pd
import numpy as np

input_size=2
output_size=2
hidden_size=10

class Net(nn.Module):
  def __init__(self):
    super(Net, self).__init__()
    self.fc1 = torch.nn.Linear(input_size, hidden_size)
    self.fc2 = torch.nn.Linear(hidden_size, hidden_size)
    self.fc3 = torch.nn.Linear(hidden_size, output_size)

  def forward(self, X):
    X = torch.relu((self.fc1(X)))
    X = torch.relu((self.fc2(X)))
    X = self.fc3(X)

    return F.log_softmax(X, dim=1)

model = Net()

model.load_state_dict(torch.load('customer_buy_state_dict'))

new_data = torch.from_numpy(sc.transform(np.array([[42, 50000]]))).float()

y_cust = model(new_data)

_, predicted = torch.max(y_cust, -1)
print(predicted)

